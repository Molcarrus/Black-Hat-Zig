const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{
        .default_target = .{
            .cpu_arch = .x86_64,
            .os_tag = .windows,
        },
    });
    const optimize = b.standardOptimizeOption(.{});

    // 1. Build the Payload DLL (from root.zig)
    const payload_dll = b.addSharedLibrary(.{
        .name = "payload_dll",
        .root_source_file = b.path("src/root.zig"),
        .target = target,
        .optimize = optimize,
    });

    // Link Windows libraries for the DLL
    payload_dll.linkSystemLibrary("kernel32");
    payload_dll.linkSystemLibrary("user32");

    // Install the DLL
    b.installArtifact(payload_dll);

    // 2. Build the DLL Injector executable (from main.zig)
    const injector_exe = b.addExecutable(.{
        .name = "dll_injector",
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });

    // Link Windows libraries for the injector
    injector_exe.linkSystemLibrary("kernel32");
    injector_exe.linkSystemLibrary("user32");

    // Install the injector
    b.installArtifact(injector_exe);

    // 3. Create run step for the injector
    const run_cmd = b.addRunArtifact(injector_exe);
    run_cmd.step.dependOn(b.getInstallStep());

    // Pass arguments to the application
    if (b.args) |args| {
        run_cmd.addArgs(args);
    }

    const run_step = b.step("run", "Run the DLL injector");
    run_step.dependOn(&run_cmd.step);

    // 4. Alternative run steps with specific names
    const inject_step = b.step("inject", "Run the DLL injector");
    inject_step.dependOn(&run_cmd.step);

    // 5. Build step to ensure both DLL and injector are built
    const build_all_step = b.step("build-all", "Build both payload DLL and injector");
    build_all_step.dependOn(&payload_dll.step);
    build_all_step.dependOn(&injector_exe.step);

    // 6. Unit tests
    const dll_tests = b.addTest(.{
        .root_source_file = b.path("src/root.zig"),
        .target = target,
        .optimize = optimize,
    });

    const injector_tests = b.addTest(.{
        .root_source_file = b.path("src/main.zig"),
        .target = target,
        .optimize = optimize,
    });

    const run_dll_tests = b.addRunArtifact(dll_tests);
    const run_injector_tests = b.addRunArtifact(injector_tests);

    const test_step = b.step("test", "Run all unit tests");
    test_step.dependOn(&run_dll_tests.step);
    test_step.dependOn(&run_injector_tests.step);
}
